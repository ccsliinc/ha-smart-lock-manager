name: Validate

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate manifest
      run: |
        python -c "
        import json
        with open('custom_components/smart_lock_manager/manifest.json') as f:
            manifest = json.load(f)
            print(f'✅ Manifest valid: {manifest[\"name\"]} v{manifest[\"version\"]}')
            required_fields = ['domain', 'name', 'version', 'documentation', 'issue_tracker', 'codeowners']
            for field in required_fields:
                if field not in manifest:
                    raise ValueError(f'Missing required field: {field}')
            print('✅ All required manifest fields present')
        "
    
    - name: Validate Python syntax
      run: |
        find custom_components/smart_lock_manager -name "*.py" -exec python -m py_compile {} \;
        echo "✅ Python syntax validation passed"
    
    - name: Test imports
      run: |
        cd custom_components/smart_lock_manager
        python -c "
        try:
            from const import DOMAIN, VERSION
            print(f'✅ Smart Lock Manager v{VERSION} imports successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
    
    - name: Run security scan (Bandit)
      run: |
        pip install bandit
        bandit -r custom_components/smart_lock_manager/ -f json -o bandit-report.json || true
        bandit -r custom_components/smart_lock_manager/ -ll
        echo "✅ Security scan completed"
    
    - name: Run tests
      run: |
        pip install pytest pytest-homeassistant-custom-component pytest-cov
        pytest tests/ -v --cov=custom_components.smart_lock_manager --cov-report=term-missing
        echo "✅ Test suite passed"
    
    - name: Validate HACS
      run: |
        python -c "
        import json
        with open('hacs.json') as f:
            hacs = json.load(f)
            print(f'✅ HACS config valid: {hacs[\"name\"]} v{hacs[\"version\"]}')
            required = ['name', 'version', 'domains']
            for field in required:
                if field not in hacs:
                    raise ValueError(f'Missing HACS field: {field}')
        "
        echo "✅ HACS validation passed"